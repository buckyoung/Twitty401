
import java.util.Date;
import javax.swing.BorderFactory;
import twitter4j.Status;
import twitter4j.User;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author BuckYoung
 */
public class TweetObject extends javax.swing.JPanel {

    private User user; //field needed in AutoInitialize
    private String time; //field needed in AutoInitialize
    private String text; //field needed in AutoInitialize
    private long ID;
    public Timeline.Type parent;
    public boolean hasURL = false;
    public boolean hasMention = false;

    /**
     * Creates new form TweetObject
     */
    public TweetObject(Status status, Timeline.Type parent) {
        //initialize fields
        this.time = determineRelativeTime(status.getCreatedAt());//needed for autoInit
        this.user = status.getUser();//needed for autoInit
        this.text = status.getText();//needed for autoinit
        this.parent = parent; //sets most recently loaded tweet object
        initComponents();//Auto Initialize
        //custominit
        this.pic.setIcon(UserIconLogic.getIcon(status.getUser(), UserIconLogic.Size.NORMAL));
        this.ID = status.getId();
        if (text.contains("http")) {
            hasURL = true;
        }
        if (text.contains("@")){
            hasMention = true;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSpinner1 = new javax.swing.JSpinner();
        jButton1 = new javax.swing.JButton();
        tweetTime = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tweetText = new javax.swing.JTextArea();
        tweetIcon = new javax.swing.JLabel();
        pic = new javax.swing.JLabel();

        jButton1.setText("jButton1");

        tweetTime.setText("Time");

        setBackground(new java.awt.Color(160, 200, 240));
        setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        setMaximumSize(new java.awt.Dimension(350, 160));
        setMinimumSize(new java.awt.Dimension(350, 120));
        setPreferredSize(new java.awt.Dimension(350, 120));
        setSize(new java.awt.Dimension(350, 110));

        tweetText.setEditable(false);
        tweetText.setBackground(new java.awt.Color(200, 240, 250));
        tweetText.setColumns(20);
        tweetText.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        tweetText.setLineWrap(true);
        tweetText.setRows(5);
        tweetText.setText(text);
        tweetText.setToolTipText("Click!");
        tweetText.setWrapStyleWord(true);
        tweetText.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), javax.swing.BorderFactory.createTitledBorder(time + "   " + user.getScreenName())));
        tweetText.setMaximumSize(new java.awt.Dimension(240, 140));
        tweetText.setMinimumSize(new java.awt.Dimension(240, 100));
        tweetText.setSize(new java.awt.Dimension(240, 100));
        tweetText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tweetTextMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tweetTextMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tweetTextMouseEntered(evt);
            }
        });
        jScrollPane1.setViewportView(tweetText);

        pic.setBackground(new java.awt.Color(255, 255, 255));
        pic.setToolTipText("");
        pic.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        pic.setMaximumSize(new java.awt.Dimension(50, 50));
        pic.setMinimumSize(new java.awt.Dimension(50, 50));
        pic.setPreferredSize(new java.awt.Dimension(48, 48));
        pic.setSize(new java.awt.Dimension(48, 48));
        pic.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                picMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                picMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                picMouseEntered(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(tweetIcon)
                    .add(layout.createSequentialGroup()
                        .add(pic, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 252, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createSequentialGroup()
                        .add(20, 20, 20)
                        .add(pic, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(12, 12, 12)
                .add(tweetIcon)
                .addContainerGap(17, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /*
     * Creates a popupMenu when a tweetbox is clicked!
     */
    private void tweetTextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tweetTextMouseClicked
        PopUp.getInstance(evt.getLocationOnScreen(), this);
    }//GEN-LAST:event_tweetTextMouseClicked

    /*
     * Loads userTimeline when pic clicked
     */
    private void picMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_picMouseClicked
        Timeline.createTimeline(Timeline.Type.USER, user, null); //load their timeline
        PopUp.destroyPopup();
    }//GEN-LAST:event_picMouseClicked

    /*
     * These are for tweet and pic borders (MOUSE ENTER AND EXIT)
     */
    private void picMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_picMouseEntered
        pic.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
    }//GEN-LAST:event_picMouseEntered

    private void picMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_picMouseExited
        pic.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
    }//GEN-LAST:event_picMouseExited

    private void tweetTextMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tweetTextMouseEntered
        tweetText.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), javax.swing.BorderFactory.createTitledBorder(BorderFactory.createRaisedBevelBorder(), time + "   " + user.getScreenName())));
    }//GEN-LAST:event_tweetTextMouseEntered

    private void tweetTextMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tweetTextMouseExited
        tweetText.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), javax.swing.BorderFactory.createTitledBorder(time + "   " + user.getScreenName())));
    }//GEN-LAST:event_tweetTextMouseExited
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JLabel pic;
    private javax.swing.JLabel tweetIcon;
    private javax.swing.JTextArea tweetText;
    private javax.swing.JLabel tweetTime;
    // End of variables declaration//GEN-END:variables

    /*
     * returns Formatted time
     */
    private String determineRelativeTime(Date createdAt) {
        String result;
        Date now = new Date();
        Long relativeTime = (now.getTime() - createdAt.getTime()) / (1000); //milli to sec

        if (relativeTime < 60) {
            //If relativetime can be represented as seconds
            result = relativeTime.toString() + "s";//to seconds
        } else {
            //convert relativetime to minutes:
            relativeTime = (now.getTime() - createdAt.getTime()) / (1000 * 60); //to minutes
            if (relativeTime < 60) { //mins
                //If relative time can be represented as minutes
                result = relativeTime.toString() + "m";
            } else {
                //convert relativetime to hours:
                relativeTime = (now.getTime() - createdAt.getTime()) / (1000 * 60 * 60); //to hours
                if (relativeTime < 24) {//hours
                    //if Relativetime can be represented as hours
                    result = relativeTime.toString() + "h";
                } else {
                    //convert to days and call it one
                    relativeTime = (now.getTime() - createdAt.getTime()) / (1000 * 60 * 60 * 24); //to days
                    result = relativeTime.toString() + "d";
                }
            }
        }

        return result;
    }

    //GET Properties
    public User getUser() {
        return user;
    }

    public long getSourceID() {
        return ID;
    }

    public String getText() {
        return text;
    }
}
